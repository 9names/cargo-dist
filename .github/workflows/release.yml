# CI that:
#
# * creates a Github Release™️
# * builds binaries/packages
# * uploads those packages to the release
#
# Note that the release will be created before the packages,
# so there will be a few minutes where the release has no packages
# and then they will slowly trickle in. This is annoying if one of
# the packaging tasks fails!
name: Release

permissions:
  contents: write

# This task will run whenever you push a github tag that looks like
# a version number. We just look for `v` followed by at least one number
# and then whatever. so `v1`, `v1.0.0`, and `v1.0.0-prerelease` all work.
#
# TODO: github has a way to mark a Github Release™️ as a "prerelease".
# haven't checked if taiki-e/create-gh-release-action auto-detects and applies
# this, but I've implemented it manually before if not.
on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  # Create the Github Release™️ so the packages have something to be uploaded to
  create-release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create-gh-release.outputs.computed-prefix }}${{ steps.create-gh-release.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - id: create-gh-release
        uses: taiki-e/create-gh-release-action@v1
        with:
          # (optional) Path to changelog.
          # changelog: RELEASES.md
          draft: true
          # (required) GitHub token for creating GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}

  # Build and packages all the things
  upload-assets:
    needs: create-release
    strategy:
      matrix:
        # For these target platforms
        include:
          # - target: aarch64-unknown-linux-gnu
          #  os: ubuntu-latest
          # - target: aarch64-apple-darwin
          #  os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          # - target: x86_64-apple-darwin
          #   os: macos-latest
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
    runs-on: ${{ matrix.os }}
    env:
      TAG: ${{ needs.create-release.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: Install cargo-dist
        run: cargo install --path ./cargo-dist
      - name: run cargo-dist
        run: |
          cargo dist --output-format=json > dist-manifest.json
          ARTIFACTS=`cat dist-manifest.json | jq --raw-output ".releases[].distributables[].path"`
          gh release upload $TAG $ARTIFACTS


  # Mark the release as a non-draft
  publish-release:
    needs: [create-release, upload-assets]
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.create-release.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: mark release as non-draft
        run: |
          gh release edit $TAG
